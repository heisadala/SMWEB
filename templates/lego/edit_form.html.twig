<div class='row  justify-content-between'>
    <div class="col-3">
         <div class="dropdown">
                      <button class="btn " data-bs-toggle="dropdown" type="button">
                        <img class="rounded-circle" src="{{ server_base }}/images/icon/squared-menu-96.png">
                    </button>
                    <ul class="dropdown-menu p-2 dropdown-menu-end sm-lego-dropdown" >
                        {% include ( "navbar_dropdown_item.html.twig" ) with {'item': 'Home', 'subdir' : ''} %}
                        <li><hr class="dropdown-divider"></li>
                        {% include ( "navbar_dropdown_item.html.twig" ) with {'item': 'Database', 'subdir' : 'DB'} %}
                        <li><hr class="dropdown-divider"></li>
                        {% include ( "navbar_dropdown_item.html.twig" ) with {'item': 'Lego', 'subdir' : 'DB/LEGO/HOME'} %}
                    </ul>
       </div>
    </div>
    <div id='sm-body-lego-edit-form-col-2' 
        class="col m-5 border border-warning border-5 rounded-4 bg-iceblue">
        <div class="container text-white mt-3">

            {{ form_start(lego_form,  {'attr': {'novalidate': 'novalidate'}}) }}

            <p class='text-center'><b>ITEM</b></p>
            {{ form_label(lego_form.reference) }}
            {{ form_widget(lego_form.reference) }}
            <div class='invalid-feedback' id='lego_edit_form_reference_feedback'></div>

            {{ form_label(lego_form.name) }}
            {{ form_widget(lego_form.name) }}
            <div class='invalid-feedback' id='lego_edit_form_name_feedback'></div>

            {# {{ form_label(lego_form.theme) }} #}
            {# {{ form_widget(lego_form.theme, {'value': 'City'}) }} #}

            {{ form_end(lego_form) }}
        </div>
    </div>
    <div id='sm-body-lego-edit-form-col-3' class="col-3 d-none d-lg-block"></div>

</div>

<script>
function legoFormCheckValidity(element) {

    var error = false;
    document.getElementById('lego_edit_form_Update').disabled = false;

    var reference = document.forms['lego_edit_form']['lego_edit_form_reference'];
    var reference_feedback = document.getElementById("lego_edit_form_reference_feedback");
    reference_feedback.innerHTML = "";

    var name = document.forms['lego_edit_form']['lego_edit_form_name'];
    var name_feedback = document.getElementById("lego_edit_form_name_feedback");
    name_feedback.innerHTML = "";

    if (!reference.checkValidity()) {
        reference_feedback.innerHTML = "Please provide valid number";
        document.forms['lego_edit_form']['lego_edit_form_url'].value = "https://brickset.com/sets/";

        error = true;
    } else {
        if ((element.id).localeCompare(reference.id) == 0) {
            document.forms['lego_edit_form']['lego_edit_form_url'].value = "https://brickset.com/sets/" + element.value + "-1";
        }
    }
    if (!name.checkValidity()) {
        name_feedback.innerHTML = "Please provide valid name";
        error = true;
    }

    document.forms['lego_edit_form'].classList.add('was-validated');

    if (error) {
        document.getElementById('lego_edit_form_Update').disabled = true;
    }
}



// Example starter JavaScript for disabling form submissions if there are invalid fields
{# (function () {
  'use strict'

  // Fetch all the forms we want to apply custom Bootstrap validation styles to
  var forms = document.querySelectorAll('.needs-validation')

  // Loop over them and prevent submission
  Array.prototype.slice.call(forms)
    .forEach(function (form) {
      form.addEventListener('submit', function (event) {
        if (!form.checkValidity()) {
          event.preventDefault()
          event.stopPropagation()
        }

        form.classList.add('was-validated')
      }, false)
    })
})() #}

</script>